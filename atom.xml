<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://coldrepublic.top</id>
    <title>Cold &apos;s Blog</title>
    <updated>2023-03-20T07:22:40.243Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://coldrepublic.top"/>
    <link rel="self" href="https://coldrepublic.top/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://coldrepublic.top/images/avatar.png</logo>
    <icon>https://coldrepublic.top/favicon.ico</icon>
    <rights>All rights reserved 2023, Cold &apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[基于边缘计算的实时火焰检测系统的设计]]></title>
        <id>https://coldrepublic.top/post/ji-yu-bian-yuan-ji-suan-de-shi-shi-huo-yan-jian-ce-xi-tong-de-she-ji/</id>
        <link href="https://coldrepublic.top/post/ji-yu-bian-yuan-ji-suan-de-shi-shi-huo-yan-jian-ce-xi-tong-de-she-ji/">
        </link>
        <updated>2023-02-17T08:02:49.000Z</updated>
        <content type="html"><![CDATA[<p>#PC端工作</p>
<p>安装好显卡驱动,cuda11.7版本以及cudnn<br>
软件Anaconda,命令行调试工具，开发IDE pycharm<br>
这里推荐Termius,界面简洁美观，可自定义执行脚本，节省大量复制粘贴时间<br>
官网下载地址<a href="https://termius.com/free-ssh-client-for-windows">Termius</a><br>
<img src="https://coldrepublic.top/post-images/1676621436809.jpg" alt="Termius界面" loading="lazy"><br>
以上所有软件均已打包至网盘</p>
<blockquote>
<p>百度网盘：https://pan.baidu.com/s/1ezDhLMeyTdZwp_4I85c4QA  提取码：w06i<br>
谷歌网盘：https://drive.google.com/drive/folders/1HxvTaL_20HdHceTlb0nVGCSwr5YZC-hI?usp=share_link</p>
</blockquote>
<p>介绍一下本机配置及系统环境</p>
<ul>
<li>12th Gen Intel(R) Core(TM) i5   /  B660i 芯片组</li>
<li>Nvidia RTX3060ti 8G （选择N卡能够使用cuda, 相较于A卡有无可比拟的优势</li>
<li>DDR4 3200 16G*2</li>
<li>win10专业版 22H2</li>
</ul>
<!-- 检查环境是否配置正确-->
<p>完成前期准备工作后，开始安装pytorch，torchvision。利用Anaconda创建虚拟环境，保证该项目独立运行避免冲突问题，方便后期备份与管理</p>
<p>打开Anaconda选择Create ，命名并选择Python版本，这里选择3.8，等待片刻即可完成环境创建<br>
<img src="https://coldrepublic.top/post-images/1676623157991.jpg" alt="环境创建" loading="lazy"></p>
<p>打开终端调试工具Termius<br>
输入 <code>conda activate 环境名</code> 激活虚拟环境<br>
激活完成后开始配置torchvision与pytorch<br>
进入<a href="https://pytorch.org/get-started/locally/">pytorch官网</a><br>
可以看到有三种不同的安装方式，分别为conda，pip 与 本地安装<br>
<img src="https://coldrepublic.top/post-images/1676623440280.jpg" alt="安装" loading="lazy"><br>
网络环境较好的可以选择conda与pip，对于这二者的区别可以查看此文 <a href="https://zhuanlan.zhihu.com/p/508506160">conda pip 区别</a> ,浅显易懂</p>
<blockquote>
<p>总的来说pip可以允许你在任何环境中安装python包，而conda允许你在conda环境中安装任何语言包<br>
这里选择conda安装 ，需要注意的是，一定要安装与自己cuda对应的版本（11.7），在终端输入</p>
</blockquote>
<pre><code>有GPU, cuda版本为11.7

conda install pytorch torchvision torchaudio pytorch-cuda=11.7 -c pytorch -c nvidia
</code></pre>
<pre><code>若只有CPU则输入

conda install pytorch torchvision torchaudio cpuonly -c pytorch
</code></pre>
<p>整个过程耗时大约5分钟<br>
完成后在命令行输入</p>
<pre><code>python
import torch
torch.cuda.is_available()
</code></pre>
<p>若输出 True则表示安装成功</p>
<p>随后至yolov5的<a href="https://github.com/ultralytics/yolov5/releases/tag/v6.0">github</a>首页下载源码<br>
或可直接在命令行输入</p>
<pre><code>git clone -b v6.0 https://github.com/ultralytics/yolov5/releases/tag/v6.0

</code></pre>
<p>下载源码解压后按照所需依赖</p>
<pre><code>pip install -r requirements.txt
</code></pre>
<p>若下载较慢可以使用国内源，这里提供俩个，可直接添加至Termius脚本库，方便调用<br>
<img src="https://coldrepublic.top/post-images/1678691409898.jpg" alt="pip源" loading="lazy"></p>
<pre><code>清华源
-i https://mirrors.aliyun.com/pypi/simple/
执行方式 ：pip install -r requirements.txt -i https://mirrors.aliyun.com/pypi/simple/

阿里
-i https://pypi.tuna.tsinghua.edu.cn/simple gensim
</code></pre>
<p>全部完成后执行检测，会自动下载权重，成功如图</p>
<pre><code>pyhton detect.py
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://coldrepublic.top/post-images/1678691580570.jpg" alt="YOLO5" loading="lazy"></figure>
<!-- 分隔符 -->
<p>转到嵌入式端<br>
首先需要下载镜像，到<a href="https://developer.nvidia.com/embedded/jetpack-archive">官网</a>选择合适的版本即可，这里选择jetson nano jetpack4.6<br>
<img src="https://coldrepublic.top/post-images/1678691826264.jpg" alt="Download" loading="lazy"><br>
下载好后选择一张64G的tf卡进行格式化，使用etcher进行烧录，启动即可<br>
<img src="https://coldrepublic.top/post-images/1678691896957.jpg" alt="" loading="lazy"></p>
<p>首先配置cuda，系统已自带10.2<br>
输入</p>
<pre><code>sudo vi ~/.bashrc
</code></pre>
<p>在底部添加</p>
<pre><code>export PATH=/usr/local/cuda-10.2/bin${PATH:+:${PATH}}
export LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
export CUDA_ROOT=/usr/local/cuda
export OPENBLAS_CORETYPE=ARMV8
</code></pre>
<p>退出后分别输入</p>
<pre><code>source ~/.bashrc
nvcc -V
</code></pre>
<p>若出现如下画面则说明配置成功<img src="https://coldrepublic.top/post-images/1678699355798.jpg" alt="cuda" loading="lazy"></p>
<p>安装相关依赖</p>
<pre><code>sudo apt-get install libatlas-base-dev gfortran libcanberra-gtk-module libcanberra-gtk3-module -y
sudo apt-get install libhdf5-serial-dev hdf5-tools -y
sudo apt-get install nano locate screen -y
sudo apt-get install build-essential -y
sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev -y
sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff5-dev libdc1394-22-dev -y
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev liblapacke-dev -y
sudo apt-get install libxvidcore-dev libx264-dev -y
sudo apt-get install libatlas-base-dev gfortran -y
sudo apt-get install ffmpeg -y
sudo apt-get install libopenmpi2
sudo apt-get install libopenblas-dev
sudo apt-get install libjpeg-dev zlib1g-dev
sudo apt-get install libcanberra-gtk-module
sudo apt-get install libopenblas-base libopenmpi-dev 

</code></pre>
<p>更新Cmake</p>
<pre><code>wget http://www.cmake.org/files/v3.13/cmake-3.13.0.tar.gz
tar xpvf cmake-3.13.0.tar.gz cmake-3.13.0/  
cd cmake-3.13.0/
./bootstrap --system-curl	
make -j4 
echo 'export PATH=~/cmake-3.13.0/bin/:$PATH' &gt;&gt; ~/.bashrc
source ~/.bashrc 
编译时间较长，耐心等待
</code></pre>
<p>如图显示，更新完成<br>
<img src="https://coldrepublic.top/post-images/1678701827825.jpg" alt="cmake" loading="lazy"></p>
<p>jtop安装</p>
<pre><code>sudo apt-get install libhdf5-serial-dev hdf5-tools
sudo apt-get install libatlas-base-dev gfortran
pip3 install jetson-stats
reboot
</code></pre>
<p>输入 jtop 即可监控系统状态<br>
<img src="https://coldrepublic.top/post-images/1678702782944.jpg" alt="jtop" loading="lazy"></p>
<p>安装torch和torchvision<br>
这里选择torch1.8.0和torchvision0.90</p>
<blockquote>
<p>百度网盘 :链接:https://pan.baidu.com/s/1gqEubQInnH8ebltJZhDijA<br>
提取码：b5ye<br>
官网其他版本 : https://forums.developer.nvidia.com/t/pytorch-for-jetson/72048</p>
</blockquote>
<p>安装前工作</p>
<pre><code>防止出现core dumped的情况
sudo vi ~/.bashrc
export OPENBLAS_CORETYPE=ARMV8
</code></pre>
<p>下载好后，使用unzip命令解压压缩包并cd进入</p>
<p>torch1.8.0安装</p>
<pre><code>sudo pip3 install [name].whl 
</code></pre>
<p>torchvision0.9.0安装</p>
<pre><code>cd torchvision
export BUILD_VERSION=0.9.0
python3 setup.py install --user
安装时间较长 
</code></pre>
<p><img src="https://coldrepublic.top/post-images/1678866421655.jpg" alt="安装过程" loading="lazy"><br>
测试安装是否成功</p>
<pre><code>python3
import torch
import torchvision
print(torch.cuda.is_available())
quit()
输出True则成功
</code></pre>
<p>yolov5板端运行<br>
首先从github下载</p>
<pre><code>git clone -b v5.0 https://github.com/ultralytics/yolov5.git
如需使用其他版本 修改 -b v （所需版本）. 0 , 目前官方提供 1.0-7.0可供选择 
</code></pre>
<p>cd进入并安装依赖</p>
<pre><code>pip install -r requirements
</code></pre>
<p>执行</p>
<pre><code>python3 detect.py
</code></pre>
<p>结果与PC端相同</p>
<p>TensorRT加速</p>
<pre><code>python3 gen_wts.py -w best.pt -o fire.wts        
cd ~/tensorrtx/yolov5/      
mkdir build
cd build
将生成的wts文件复制到build下    #手动下载的，名称为yolov5-master
cmake ..
make -j4
sudo ./yolov5 -s yolov5s.wts yolov5n.engine s
sudo ./yolov5 -d yolov5n.engine ../samples/    
</code></pre>
<p>细节及程序优化部分待项目结束后公布，谢谢。</p>
]]></content>
    </entry>
</feed>